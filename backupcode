++  on-watch
    |=  =path  
    ^-  (quip card _this)
    |^  ::...how i learned to stop worrying and love the bar-ket.
      ?~  path  !!  ?:  =(our.bowl src.bowl)  (localarm path)  (remotearm path)
      ++  localarm  ::Just renew the FE subscriptions, for now.
      ::apparently, we don't need a case for %leave. Arvo/Gall will deal with it (?)
        |=  path=(list @ta)  ~&  "localarm:on-watch FE subscribe... "  ~&  "path is:"  ~&  path
            ~&  >  "outgoing subs"  ~&  >  wex.bowl  ~&  >  "incoming subs"  ~&  >  sup.bowl
            :_  this  [%give %fact ~[path] %quoridor-update !>(`update`[%init tc=tcount])]~
      ++  remotearm  ::Once we get here, we finalize our game state, and report back to our other app.
        |=  path=(list @ta)  ::the person who made the sub request is P1. We are P2.
        ~&  >  src.bowl  ~&  >  " has requested a game. Accepting and confirming."
        ::~&  >  "outgoing subs"  ~&  >  wex.bowl  ~&  >  "incoming subs"  ~&  >  sup.bowl
          =/  playnum1  1  =/  playpos1  ^-  position  [0 8]  =/  pstrut1  ^-  player  [playnum1 src.bowl playpos1 10]
          =/  playnum2  2  =/  playpos2  ^-  position  [16 8]  =/  pstrut2  ^-  player  [playnum2 our.bowl playpos2 10]
          :_  %=  this  pmap  (my ~[[playnum1 pstrut1] [playnum2 pstrut2]])  tcount  .+  tcount  ourpnum  2  ==
          :: We give back an init fact (one with an empty wire) to the subscriber
          :: By default, we now switch into "waiting" for a move/wall poke for p1
          ::  [!!!]  First Card: Initial update for initiator (~zod). Second Card: Update the FE!
          :~  [%give %fact ~ %quoridor-update !>(`update`[%passign p1=src.bowl p2=our.bowl])]
              [%give %fact ~[/qdata] %quoridor-update !>(`update`[%passign p1=src.bowl p2=our.bowl])]
              ::We also need to subscribe back to zod! For zod will be sending us messages
              [%pass /qdata-wire %agent [src.bowl %quoridor] %watch /qdata]  
          ==
    --